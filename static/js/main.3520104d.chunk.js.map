{"version":3,"sources":["store/restaurants.js","store/index.js","api.js","store/selectors.js","components/RestourantsListPage.js","App.js","store/thunk.js","index.js"],"names":["restaurantsReducer","restaurants","arguments","length","undefined","action","type","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","getRestaurantsFromServer","response","regenerator_default","a","async","_context","prev","next","awrap","fetch","sent","abrupt","json","stop","selectRestaurantsList","createSelector","state","_ref","feedItems","storesMap","map","_ref2","uuid","connect","react_default","createElement","JSON","stringify","loadRestaurants","dispatch","data","useEffect","Fragment","RestourantsListPage","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"mNAgBeA,EATY,WAAgC,IAA/BC,EAA+BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjB,KAAMG,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzD,OAAQC,EAAOC,MACb,IAToB,iBAUlB,OAAOD,EAAOJ,YAChB,QACE,OAAOA,ICPPM,EAAcC,YAAgB,CAClCP,YAAaD,IAKAS,EAFDC,YAAYH,EAAaI,YAAgBC,sBCT1CC,EAA2B,eAAAC,EAAA,OAAAC,EAAAC,EAAAC,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,aAElC,8DAFkCF,EAAAE,KAAA,EAAAL,EAAAC,EAAAK,MAIfC,MAFnB,gEAFkC,cAIhCR,EAJgCI,EAAAK,KAAAL,EAAAM,OAAA,SAM/BV,EAASW,QANsB,wBAAAP,EAAAQ,mBCI3BC,EAAwBC,YAFhB,SAAAC,GAAK,OAAIA,GAI5B,SAAAC,GAAqB,IAAlB7B,EAAkB6B,EAAlB7B,YACD,IAAKA,EACH,MAAO,GAFU,IAKX8B,EAAyB9B,EAAzB8B,UAAWC,EAAc/B,EAAd+B,UAEnB,OAAOD,EAAUE,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OAAcH,EAAUG,OCKlCC,cAJS,SAAAP,GAAK,MAAK,CAChC5B,YAAa0B,EAAsBE,KAGtBO,CAba,SAAAN,GAAA,IAAG7B,EAAH6B,EAAG7B,YAAH,OAC1BoC,EAAArB,EAAAsB,cAAA,WACGC,KAAKC,UAAUvC,EAAa,KAAM,MCexBmC,qBAAQ,KAAM,CAAEK,gBCnBA,kBAAM,SAAMC,GAAN,IAAAZ,EAAAa,EAAA,OAAA5B,EAAAC,EAAAC,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAAAL,EAAAC,EAAAK,MACZR,KADY,OAAAiB,EAAAZ,EAAAK,KAC3BoB,EAD2Bb,EAC3Ba,KAERD,ENJ4C,CAC5CpC,KAHsB,iBAItBL,YMEwB0C,IAHW,wBAAAzB,EAAAQ,aDmBtBU,CAbH,SAAAN,GAAyB,IAAtBW,EAAsBX,EAAtBW,gBAKb,OAJAG,oBAAU,WACRH,KACC,IAGDJ,EAAArB,EAAAsB,cAAAD,EAAArB,EAAA6B,SAAA,KACER,EAAArB,EAAAsB,cAAA,6BACAD,EAAArB,EAAAsB,cAACQ,EAAD,UEXNC,IAASC,OACPX,EAAArB,EAAAsB,cAACW,EAAA,EAAD,CAAUxC,MAAOA,GACf4B,EAAArB,EAAAsB,cAACY,EAAD,OAEAC,SAASC,eAAe","file":"static/js/main.3520104d.chunk.js","sourcesContent":["const SET_RESTAURANTS = 'setRestaurants';\n\nexport const setRestaurants = restaurants => ({\n  type: SET_RESTAURANTS,\n  restaurants,\n});\n\nconst restaurantsReducer = (restaurants = null, action) => {\n  switch (action.type) {\n    case SET_RESTAURANTS:\n      return action.restaurants;\n    default:\n      return restaurants;\n  }\n};\n\nexport default restaurantsReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\n\nimport restaurantsReducer from './restaurants';\n\nconst rootReducer = combineReducers({\n  restaurants: restaurantsReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport default store;\n","export const getRestaurantsFromServer = async() => {\n  const RESTAURANTS_API\n    = 'https://mate-uber-eats-api.herokuapp.com/api/v1/restaurants';\n\n  const response = await fetch(RESTAURANTS_API);\n\n  return response.json();\n};\n","import { createSelector } from 'reselect';\n\nconst rootSelector = state => state;\n\nexport const selectRestaurantsList = createSelector(\n  rootSelector,\n  ({ restaurants }) => {\n    if (!restaurants) {\n      return [];\n    }\n\n    const { feedItems, storesMap } = restaurants;\n\n    return feedItems.map(({ uuid }) => storesMap[uuid]);\n  }\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { selectRestaurantsList } from '../store/selectors';\n\nconst RestaurantsListPage = ({ restaurants }) => (\n  <pre>\n    {JSON.stringify(restaurants, null, 4)}\n    {/* {restaurants.map(restaurant =>\n       <Restaurant restaurant={restaurant} />)}\n       */}\n  </pre>\n);\n\nconst mapStateToProps = state => ({\n  restaurants: selectRestaurantsList(state),\n});\n\nexport default connect(mapStateToProps)(RestaurantsListPage);\n\nRestaurantsListPage.propTypes = {\n  restaurants: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { loadRestaurants } from './store/thunk';\n\nimport RestaurantsListPage from './components/RestourantsListPage';\nimport './App.css';\n\n// eslint-disable-next-line no-shadow\nconst App = ({ loadRestaurants }) => {\n  useEffect(() => {\n    loadRestaurants();\n  }, []);\n\n  return (\n    <>\n      <h1>React Uber eats</h1>\n      <RestaurantsListPage />\n    </>\n  );\n};\n\nexport default connect(null, { loadRestaurants })(App);\n\nApp.propTypes = {\n  loadRestaurants: PropTypes.func.isRequired,\n};\n","import { setRestaurants } from './restaurants';\nimport { getRestaurantsFromServer } from '../api';\n\nexport const loadRestaurants = () => async(dispatch) => {\n  const { data } = await getRestaurantsFromServer();\n\n  dispatch(setRestaurants(data));\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  , document.getElementById('root')\n);\n"],"sourceRoot":""}